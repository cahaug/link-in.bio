{"version":3,"sources":["components/ListDisplayHooks.js"],"names":["ListDisplayHooks","match","useState","isLoading","setIsLoading","links","setLinks","url","ourURL","profilePictureURL","setProfilePictureURL","userFirstNameLastName","setUserFirstNameLastName","displayName","setDisplayName","displayingUserInfo","setDisplayingUserInfo","darkMode","setDarkMode","drawerPulled","setDrawerPulled","backgroundColor","setBackgroundColor","textColor","setTextColor","backgroundURL","setBackgroundURL","setChosenFont","ColorLuminance","hex","lum","String","replace","length","c","i","rgb","parseInt","substr","Math","round","min","max","toString","applyDarkMode","document","getElementsByClassName","classList","toggle","k","txtColorElement0","style","color","n","borderElement0","arrowChangeColor","border","borderBottom","getElementById","mainBackgroundElement","backgroundImage","m","o","drawerToggle","drawer","maxHeight","scrollHeight","updateTextFont","font","fontPickerSampleTextArray","useEffect","useThisURL","axios","get","then","a","res","data","userFirstLastName","firstName","lastName","displayUserInfo","listBackgroundURL","backgroundImageURL","mt","navigator","maxTouchPoints","listId","title","window","location","host","mql","matchMedia","thelinks","map","link","className","referencingURL","href","onClick","e","preventDefault","entryId","imgURL","src","alt","linkTitle","description","emptiedList","0","x","console","log","backColor","txtColor","fontSelection","collapsingDescriptions","addEventListener","this","content","nextElementSibling","allTrackedLinks","headerTextElement","legth","matches","catch","err","toast","error","loadingGif","width","id","Date","getFullYear","name"],"mappings":"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","file":"static/js/3.49e57304.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport axios from \"axios\"\r\nimport loadingGif from '../files/loading.gif'\r\nimport '../App.css'\r\nimport toast from \"react-hot-toast\"\r\nimport {Helmet} from 'react-helmet'\r\n\r\n\r\nfunction ListDisplayHooks(match) {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [links, setLinks] = useState([])\r\n    const [ourURL] = useState(match.match.url)\r\n    const [profilePictureURL, setProfilePictureURL] = useState()\r\n    const [userFirstNameLastName, setUserFirstNameLastName] = useState()\r\n    const [displayName, setDisplayName] = useState()\r\n    const [displayingUserInfo, setDisplayingUserInfo] = useState()\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    const [drawerPulled, setDrawerPulled] = useState(false)\r\n    const [backgroundColor, setBackgroundColor] = useState('#FFFFFF')\r\n    const [textColor, setTextColor] = useState('#000000')\r\n    const [backgroundURL, setBackgroundURL] = useState('')\r\n    const [chosenFont, setChosenFont] = useState()\r\n\r\n    // const browserInfoSifter = () => {\r\n    //     // console.log('this navigator', navigator)\r\n    //     if(navigator.maxTouchPoints>0){console.log('this is a touchscreen', navigator.maxTouchPoints)}else{console.log('this is not a touchscreen')}\r\n    //     console.log('current/primary language', navigator.language)\r\n    //     console.log('platform', navigator.platform)\r\n    //     const agten = navigator.userAgent\r\n    //     const chosenFew = ['Firefox','Chrome', 'Edg', '']\r\n        \r\n    // }\r\n\r\n    function ColorLuminance(hex, lum) {\r\n\r\n        // validate hex string\r\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\r\n        if (hex.length < 6) {\r\n            hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\r\n        }\r\n        lum = lum || 0;\r\n    \r\n        // convert to decimal and change luminosity\r\n        var rgb = \"#\", c, i;\r\n        for (i = 0; i < 3; i++) {\r\n            c = parseInt(hex.substr(i*2,2), 16);\r\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\r\n            rgb += (\"00\"+c).substr(c.length);\r\n        }\r\n    \r\n        return rgb;\r\n    }\r\n\r\n    const applyDarkMode = () => {\r\n        // var element = document.body;\r\n        // console.log('backcolor', backgroundColor, 'chosenFont', chosenFont, 'textColor', textColor)\r\n        var element = document.getElementsByClassName('App')\r\n        element[0].classList.toggle(\"darkMode\")\r\n        if(darkMode===true){\r\n            var txtColorElement0 = document.getElementsByClassName('linkDescription')\r\n            var k\r\n            for (k=0; k< txtColorElement0.length; k++){\r\n                txtColorElement0[k].style.color = `${textColor}`\r\n                // txtColorElement[j].style.color = `${res.data[0].backColor}`\r\n            }\r\n            var borderElement0 = document.getElementsByClassName('linkSquare')\r\n            var arrowChangeColor = document.getElementsByClassName('linkDescriptionTag')\r\n            var n\r\n            for (n=0; n< borderElement0.length; n++){\r\n                borderElement0[n].style.border = `2px solid ${textColor}`\r\n                // arrowChangeColor[n].style.color = `${textColor}`\r\n                // borderElement0[n].style.backgroundColor = `${backgroundColor}`\r\n            }for(n=0;n<arrowChangeColor.length;n++){\r\n                arrowChangeColor[n].style.color = `${textColor}`\r\n            }\r\n            var headerDividerBar = document.getElementsByClassName('linkListDisplayHeader')\r\n            headerDividerBar[0].style.borderBottom = `0.25vh solid ${textColor}`\r\n            // headerDividerBar[0].style.backgroundColor = `${backgroundColor}`\r\n            var headerTextElement = document.getElementById('headerName')\r\n            headerTextElement.style.color = `${textColor}`\r\n            var mainBackgroundElement = document.getElementsByClassName('theMain')\r\n            if(backgroundURL.length<8){\r\n                mainBackgroundElement[0].style.backgroundImage = `linear-gradient(70deg, ${textColor}, ${backgroundColor})`\r\n            }\r\n        } else {\r\n            var txtColorElement0 = document.getElementsByClassName('linkDescription')\r\n            var m\r\n            for (m=0; m< txtColorElement0.length; m++){\r\n                txtColorElement0[m].style.color = 'grey'\r\n                // txtColorElement[j].style.color = `${res.data[0].backColor}`\r\n            }\r\n            var borderElement0 = document.getElementsByClassName('linkSquare')\r\n            var arrowChangeColor = document.getElementsByClassName('linkDescriptionTag')\r\n            var o\r\n            for (o=0; o< borderElement0.length; o++){\r\n                borderElement0[o].style.border = `2px solid grey`\r\n                // arrowChangeColor[o].style.color = 'grey'\r\n                // borderElement0[o].style.backgroundColor = '#000000'\r\n            }\r\n            for (o=0; o< arrowChangeColor.length; o++){\r\n                // borderElement0[o].style.border = `2px solid grey`\r\n                arrowChangeColor[o].style.color = 'grey'\r\n                // borderElement0[o].style.backgroundColor = '#000000'\r\n            }\r\n            var headerDividerBar = document.getElementsByClassName('linkListDisplayHeader')\r\n            headerDividerBar[0].style.borderBottom = '0.25vh solid black'\r\n            // headerDividerBar[0].style.backgroundColor = '#000000'\r\n            var headerTextElement = document.getElementById('headerName')\r\n            headerTextElement.style.color = 'white'\r\n            var mainBackgroundElement = document.getElementsByClassName('theMain')\r\n            // mainBackgroundElement[0].style.backgroundColor = '#000000'\r\n            if(backgroundURL.length<8){\r\n                mainBackgroundElement[0].style.backgroundImage = 'linear-gradient(70deg, #151515, black)'\r\n            }\r\n        }\r\n        setDarkMode(!darkMode) \r\n    }\r\n\r\n    const drawerToggle = () => {\r\n        const drawer = document.getElementsByClassName('drawer')\r\n        if (drawer[0].style.maxHeight){\r\n            drawer[0].style.maxHeight = null;\r\n            setDrawerPulled(false)\r\n        } else {\r\n            drawer[0].style.maxHeight = drawer[0].scrollHeight + \"px\";\r\n            setDrawerPulled(true)\r\n        }\r\n    }\r\n\r\n    // const revealDescription = () => {\r\n    //     const hiddenDescription = document.get\r\n    // }\r\n\r\n    const updateTextFont = (font) => {\r\n        var fontPickerSampleTextArray = document.getElementsByClassName('App')\r\n        var i \r\n        for (i=0; i<fontPickerSampleTextArray.length; i++){\r\n            fontPickerSampleTextArray[i].classList.toggle(`${font}Font`)\r\n            // fontPickerSampleTextArray[i].style.fontFamily = fontsDict[font]['name']\r\n            // fontPickerSampleTextArray[i].style.fontWeight = fontsDict[font]['weight']\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // window.Intercom(\"boot\", {\r\n        //     app_id: \"ya321a09\"\r\n        //   });\r\n        const useThisURL = `https://link-in-bio.limited${ourURL}`\r\n        axios.get(useThisURL)\r\n        .then(async res => {\r\n            // console.log('backend res', res.data)\r\n            let userFirstLastName; let displayName; let profilePictureURL; let displayingUserInfo;\r\n            if(res.data.length !== 0){\r\n                userFirstLastName = `${res.data[0].firstName} ${res.data[0].lastName}`\r\n                displayName = res.data[0].displayName\r\n                profilePictureURL = `${res.data[0].profilePictureURL}`\r\n                displayingUserInfo = `${res.data[0].displayUserInfo}`\r\n                setDisplayName(displayName)\r\n                setProfilePictureURL(profilePictureURL)\r\n                setUserFirstNameLastName(userFirstLastName)\r\n                setDisplayingUserInfo(displayingUserInfo)\r\n            } else {\r\n                userFirstLastName = `Empty Link-In Bio`\r\n                displayName = `Empty Link-In Bio`\r\n                profilePictureURL = `https://imagizer.imageshack.com/img924/128/aacWe9.jpg`\r\n                displayingUserInfo = ` `\r\n                setDisplayName(displayName)\r\n                setProfilePictureURL(profilePictureURL)\r\n                setUserFirstNameLastName(userFirstLastName)\r\n                setDisplayingUserInfo(displayingUserInfo)\r\n            }\r\n            if(res.data.length>0&&res.data[0].listBackgroundURL !== null){\r\n                const backgroundImageURL = `${res.data[0].listBackgroundURL}`\r\n                setBackgroundURL(backgroundImageURL)\r\n            }\r\n            const mt = navigator.maxTouchPoints\r\n            let incrementedListViews\r\n            if(res.data.length>0){incrementedListViews = axios.get(`https://link-in-bio.limited/s/ili/${res.data[0].listId}?mt=${mt}`)}\r\n            // console.log(incrementedListViews)\r\n            setIsLoading(false);\r\n            document.title = `${window.location.host}${ourURL} - ${displayName}`\r\n            if(displayName===null){\r\n                document.title = `${window.location.host}${ourURL} - ${userFirstLastName}`\r\n            }\r\n            let mql = window.matchMedia('(prefers-color-scheme: dark)')\r\n            // initialize in dark mode\r\n            // var element0 = document.getElementsByClassName('App')\r\n            // element0[0].classList.toggle(\"darkMode\")\r\n           \r\n            if(res.data.length>0){const thelinks = (res.data.map((link) => {\r\n                return (\r\n\r\n                        <div className='linkSquare' key={link.entryId}>\r\n                            {\r\n                                link.referencingURL === ' '?<a className='linkTitle' href='#' onClick={async (e)=>{\r\n                                    e.preventDefault()\r\n                                    // console.log('fired', link.referencingURL, link.entryId, mt)\r\n                                    const trashRequest = axios.get(`https://link-in-bio.limited/s/?eid=${link.entryId}&ref=${link.referencingURL}&mt=${mt}&red=f`)\r\n                                    // const trashRequest = await axios.get(`https://link-in-bio.limited/s/?eid=${link.entryId}&ref=${link.referencingURL}&mt=${mt}&red=f`)\r\n                                    // console.log('trashRequest', trashRequest)\r\n                                }}>\r\n                                {link.imgURL?<img className='image' src={link.imgURL} alt={link.linkTitle} /> : null }\r\n                                {/* <img className='image' src={link.imgURL} alt={link.linkTitle} />  */}\r\n                                <h3>{link.linkTitle}</h3>\r\n                                </a>:<a className='linkTitle' href={link.referencingURL} onClick={async (e)=>{\r\n                                e.preventDefault()\r\n                                setIsLoading(true) \r\n                                // console.log('fired', link.referencingURL, link.entryId, mt)\r\n                                const trashRequest = axios.get(`https://link-in-bio.limited/s/?eid=${link.entryId}&ref=${link.referencingURL}&mt=${mt}&red=f`)\r\n                                // const trashRequest = await axios.get(`https://link-in-bio.limited/s/?eid=${link.entryId}&ref=${link.referencingURL}&mt=${mt}&red=f`)\r\n                                // console.log('trashRequest', trashRequest)\r\n                                setIsLoading(false)\r\n                                window.location.href = link.referencingURL\r\n                                }}>\r\n                                {link.imgURL?<img className='image' src={link.imgURL} alt={link.linkTitle} /> : null }\r\n                                {/* <img className='image' src={link.imgURL} alt={link.linkTitle} />  */}\r\n                                <h3>{link.linkTitle}</h3>\r\n                            </a>}\r\n                            {link.description !== ' '?<span><p className=\"linkDescriptionTag\">▼</p>\r\n                            <p className='linkDescription'>{link.description}</p></span> :null}\r\n                        </div>\r\n\r\n                )\r\n            }))\r\n            setLinks(thelinks)}\r\n            // console.log('res.data', res.data.length)\r\n            if(res.data.length == 0){\r\n                const emptyList = {0:true}\r\n                const emptiedList = emptyList.map((x) => {\r\n                    console.log('x', \"\\n[Object object]\", x)\r\n                    return (\r\n                        <div className='linkSquare'>\r\n                            <a className='linkTitle' href='#' onClick={(e)=>{e.preventDefault()}}>\r\n                                <h3>This List Is Empty</h3>\r\n                            </a>\r\n                            <br />\r\n                            <div className=\"linkSquareButtonHolder\"><br /></div>\r\n                            <p className=\"linkDescriptionTag\">▼</p>\r\n                            <p className='linkDescription'><br />This entry automatically disappears once an entry is added to this list.<br /></p>\r\n                        </div>\r\n                    )\r\n                })\r\n                setLinks(emptiedList)\r\n            }\r\n            // console.log('thelinks',thelinks)\r\n            // if \r\n            // console.log(res.data[0])\r\n            if(res.data.length>0&&res.data[0].backColor){\r\n                // console.log('backColor Changed Bruh!')\r\n                setBackgroundColor(`${res.data[0].backColor}`)\r\n            }\r\n            if(res.data.length>0&&res.data[0].txtColor){\r\n                // console.log('textColor Changed Bruh!')\r\n               setTextColor(`${res.data[0].txtColor}`)\r\n            }\r\n            if(res.data.length>0&&res.data[0].fontSelection){\r\n                setChosenFont(`${res.data[0].fontSelection}`)\r\n                updateTextFont(`${res.data[0].fontSelection}`)\r\n            }\r\n            //css for hiddenDescriptions\r\n            const collapsingDescriptions = document.getElementsByClassName('linkDescriptionTag')\r\n            var i\r\n            for (i=0; i < collapsingDescriptions.length; i++){\r\n                collapsingDescriptions[i].addEventListener(\"click\", function (){\r\n                    this.classList.toggle(\"active\");\r\n                    var content = this.nextElementSibling;\r\n                    if(content.style.maxHeight){\r\n                        content.style.maxHeight = null;\r\n                    } else {\r\n                        content.style.maxHeight = content.scrollHeight + 100 + \"px\"\r\n                    }\r\n                })\r\n            }\r\n\r\n            // ban right click\r\n            const allTrackedLinks = document.getElementsByClassName('linkTitle')\r\n            for(i=0; i < allTrackedLinks.length; i++){\r\n                allTrackedLinks[i].addEventListener('contextmenu', function (e) { \r\n                    // do something here... BAN\r\n                    e.preventDefault(); \r\n                }, false);\r\n                // allTrackedLinks[i].addEventListener('oncontextmenu', e => {\r\n                    //     e.preventDefault();\r\n                    // });\r\n                }\r\n                \r\n                // initialize in custom color mode\r\n                if(res.data.length>0&&mql===false){var txtColorElement0 = document.getElementsByClassName('linkDescription')\r\n                var k\r\n                for (k=0; k< txtColorElement0.length; k++){\r\n                    txtColorElement0[k].style.color = `${res.data[0].txtColor}`\r\n                    // txtColorElement[j].style.color = `${res.data[0].backColor}`\r\n                }}\r\n                if(res.data.length>0){\r\n                    var borderElement0 = document.getElementsByClassName('linkSquare')\r\n                    var arrowChangeColor = document.getElementsByClassName('linkDescriptionTag')\r\n                    var n\r\n                    for (n=0; n< borderElement0.length; n++){\r\n                        borderElement0[n].style.border = `2px solid ${res.data[0].txtColor}`\r\n                        // arrowChangeColor[n].style.color = `${res.data[0].txtColor}`\r\n                        // borderElement0[n].style.backgroundColor = `${backgroundColor}`\r\n                    }\r\n                    for(n=0;n<arrowChangeColor.length;n++){\r\n                        arrowChangeColor[n].style.color = `${res.data[0].txtColor}`\r\n                    }\r\n                }\r\n                if(res.data.length>0){\r\n                var headerDividerBar = document.getElementsByClassName('linkListDisplayHeader')\r\n                headerDividerBar[0].style.borderBottom = `0.25vh solid ${res.data[0].txtColor}`\r\n                // headerDividerBar[0].style.backgroundColor = `${backgroundColor}`\r\n                var headerTextElement = document.getElementById('headerName')\r\n                headerTextElement.style.color = `${res.data[0].txtColor}`\r\n                var mainBackgroundElement = document.getElementsByClassName('theMain')\r\n                // console.log(mainBackgroundElement[0].style.backgroundColor)\r\n                if(res.data.length>0&&res.data[0].listBackgroundURL !== null){\r\n                    mainBackgroundElement[0].style.backgroundImage = `url(\"${res.data[0].listBackgroundURL}\")`\r\n                } else {\r\n                    if(res.data.legth>0){\r\n                        mainBackgroundElement[0].style.backgroundImage = `linear-gradient(70deg, ${res.data[0].txtColor}, ${res.data[0].backColor})`\r\n                    } else{\r\n                        mainBackgroundElement[0].style.backgroundImage = `linear-gradient(70deg, #FFFFFF, #000000)`\r\n                    }\r\n                }}\r\n                // console.log('mql', mql)            \r\n                if(mql.matches === true && res.data.length>0 ){\r\n                    headerTextElement.style.color = ColorLuminance(`${res.data[0].txtColor}`, 2)\r\n                    // initialize in dark mode\r\n                    if(`${res.data[0].txtColor}`==='#000000'){\r\n                        headerTextElement.style.color = '#FFFFFF'    \r\n                }\r\n                var element0 = document.getElementsByClassName('App')\r\n                element0[0].classList.toggle(\"darkMode\")\r\n                setDarkMode(true)\r\n            }\r\n        })\r\n        .catch(err => {console.log('err', err); toast.error('that site does not exist, yet. or check your connection.')})\r\n    }, [])\r\n\r\n\r\n    if(isLoading===true){\r\n        return <img src={loadingGif} alt=\"Loading...\" style={{width:\"200px\"}}/>\r\n    } else if (displayingUserInfo === 'false'){\r\n        return (\r\n            <div className=\"linkList\">\r\n                <header className=\"linkListDisplayHeader\"><h2>Welcome to Link-in.Bio/</h2></header>\r\n                <main id=\"main\">\r\n                    {links}\r\n                </main>\r\n                {/* <footer>\r\n                    <h4>{darkMode ? <span onClick={applyDarkMode}>💡</span>:<span>🏮</span>} ©{new Date().getFullYear()} <a href=\"http://yhy.fi/\">YHY Oy:</a> <a href=\"http://link-in.bio/\">Link-In.bio/</a></h4>\r\n                </footer> */}\r\n            </div>\r\n\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"linkList\">\r\n                <header className=\"linkListDisplayHeader\">\r\n                    {/* <hr/> */}\r\n                    <div className=\"scroller\">\r\n                        <div className=\"picHolder\">\r\n                            <div className=\"toggleHolder\">\r\n                                {darkMode ? <span onClick={applyDarkMode}>💡</span>:<span onClick={applyDarkMode}>🔦</span>}\r\n                                {drawerPulled ? <span onClick={drawerToggle}>💭</span>:<span onClick={drawerToggle}>💬</span>}\r\n                            </div>\r\n                            <br />\r\n                            <h1 id=\"headerName\">{displayName===null?userFirstNameLastName:displayName}</h1>\r\n                            <br /> \r\n                            <img src={profilePictureURL} alt={profilePictureURL} />\r\n                        </div>\r\n                        {/* <img src={profilePictureURL} alt={profilePictureURL} style={{width:\"200px\"}}/>  */}\r\n                        <div className=\"drawer\">\r\n                            <h2> ©{new Date().getFullYear()}  <a href=\"https://link-in.bio/\"><span className=\"footerLink\"> Link-in.Bio Ltd</span></a></h2>\r\n                        </div>\r\n                    </div>\r\n                {/* <hr /> */}\r\n                </header>\r\n                <main className=\"theMain\">\r\n                    {links}\r\n                </main>\r\n                {/* <footer>\r\n                    <h4>{darkMode ? <span onClick={applyDarkMode}>💡</span>:<span onClick={applyDarkMode}>🏮</span>} ©{new Date().getFullYear()} <a href=\"http://yhy.fi/\"><span className=\"footerLink\">YHY Oy:</span></a> <a href=\"http://link-in.bio/\"><span className=\"footerLink\">Link-in.Bio/</span></a></h4>\r\n                </footer> */}\r\n                <Helmet>\r\n                    <meta name=\"description\" content={`${window.location.host}${ourURL} - ${displayName===null?userFirstNameLastName:displayName}'s Link-In Bio Account`} />\r\n                </Helmet>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListDisplayHooks"],"sourceRoot":""}